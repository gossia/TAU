package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Address;
import com.example.restservicedemo.domain.Person;

public class AddressManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_ADDRESS = "CREATE TABLE Address(id bigint GENERATED BY DEFAULT AS IDENTITY, city varchar(40), postalCode char(6), street varchar(40), houseNumber varchar(20), residentId bigint)";
	private static final String ALTER_TABLE_ADDRESS_ADD_FK = "ALTER TABLE Address ADD FOREIGN KEY (residentId) REFERENCES Person (id) ON DELETE SET NULL";
	
	private PreparedStatement addAddressStmt;
	private PreparedStatement deleteAllAddressesStmt;
	private PreparedStatement deleteAddressByIdStmt;
	private PreparedStatement getAllAddressesStmt;
	private PreparedStatement getAddressByIdStmt;
	private PreparedStatement getAddressByResidentStmt;
	private PreparedStatement changeAddressResidentStmt;

	private Statement statement;

	public AddressManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Address".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists){
				statement.executeUpdate(CREATE_TABLE_ADDRESS);
				statement.executeUpdate(ALTER_TABLE_ADDRESS_ADD_FK);
			}
			
			addAddressStmt = connection
					.prepareStatement("INSERT INTO Address (id, city, postalCode, street, houseNumber, residentId) VALUES (?, ?, ?, ?, ?, ?)");
			deleteAllAddressesStmt = connection
					.prepareStatement("DELETE FROM Address");
			deleteAddressByIdStmt = connection
					.prepareStatement("DELETE FROM Address where id = ?");
			getAllAddressesStmt = connection
					.prepareStatement("SELECT id, city, postalCode, street, houseNumber, residentId FROM Address");
			getAddressByIdStmt = connection
					.prepareStatement("SELECT id, city, postalCode, street, houseNumber, residentId FROM Address where id = ?");
			getAddressByResidentStmt = connection
					.prepareStatement("select * from address join person on address.residentId = person.id and person.name = ?");
			changeAddressResidentStmt = connection
					.prepareStatement("UPDATE Address SET residentId = ? WHERE id = ?");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearAddresses() {
		try {
			deleteAllAddressesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deleteAddressById(Long id) {
		try {
			deleteAddressByIdStmt.setLong(1, id);
			deleteAddressByIdStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addAddress(Address address) {
		int count = 0;
		try {
			addAddressStmt.setLong(1, address.getId());
			addAddressStmt.setString(2, address.getCity());
			addAddressStmt.setString(3, address.getPostalCode());
			addAddressStmt.setString(4, address.getStreet());
			addAddressStmt.setString(5, address.getHouseNumber());
			addAddressStmt.setLong(6, address.getResidentId());

			count = addAddressStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int changeAddressResident(Address address, Person person) {
		int count = 0;
		try {
			changeAddressResidentStmt.setLong(1, person.getId());
			changeAddressResidentStmt.setLong(2, address.getId());


			count = changeAddressResidentStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Address> getAllAddresses() {
		List<Address> addresses = new ArrayList<Address>();

		try {
			ResultSet rs = getAllAddressesStmt.executeQuery();

			while (rs.next()) {
				Address a = new Address();
				a.setId(rs.getInt("id"));
				a.setCity(rs.getString("city"));
				a.setPostalCode(rs.getString("postalCode"));
				a.setStreet(rs.getString("street"));
				a.setHouseNumber(rs.getString("houseNumber"));
				a.setResidentId(rs.getLong("residentId"));
				addresses.add(a);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return addresses;
	}

	public List<Address> getAddressesByResident(String name) {
		List<Address> addresses = new ArrayList<Address>();

		try {
			getAddressByResidentStmt.setString(1, name);
			ResultSet rs = getAddressByResidentStmt.executeQuery();

			while (rs.next()) {
				Address a = new Address();
				a.setId(rs.getInt("id"));
				a.setCity(rs.getString("city"));
				a.setPostalCode(rs.getString("postalCode"));
				a.setStreet(rs.getString("street"));
				a.setHouseNumber(rs.getString("houseNumber"));
				a.setResidentId(rs.getLong("residentId"));
				addresses.add(a);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return addresses;
	}

	public Address getAddress(Long id) {
		Address a = new Address();
		try {
			getAddressByIdStmt.setLong(1, id);
			ResultSet rs = getAddressByIdStmt.executeQuery();

			while (rs.next()) {
				a.setId(rs.getInt("id"));
				a.setCity(rs.getString("city"));
				a.setPostalCode(rs.getString("postalCode"));
				a.setStreet(rs.getString("street"));
				a.setHouseNumber(rs.getString("houseNumber"));
				a.setResidentId(rs.getLong("residentId"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return a;
	}

}
