package com.example.restservicedemo;

import com.jayway.restassured.RestAssured;

import org.dbunit.Assertion;
import org.dbunit.IDatabaseTester;
import org.dbunit.JdbcDatabaseTester;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.dbunit.dataset.filter.DefaultColumnFilter;
import org.dbunit.dataset.xml.FlatDtdDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import javax.ws.rs.core.MediaType;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

import static com.jayway.restassured.RestAssured.*;

import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import com.example.restservicedemo.domain.Address;
import com.example.restservicedemo.domain.Person;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class PersonAddressServiceRESTDBTest {
	
	private static IDatabaseConnection connection ;
	private static IDatabaseTester databaseTester;
	

	@BeforeClass
	public static void setUp() throws Exception{
		RestAssured.baseURI = "http://localhost";
		RestAssured.port = 8080;
		RestAssured.basePath = "/restservicedemo";
		
		Connection jdbcConnection;
		jdbcConnection = DriverManager.getConnection(
				"jdbc:hsqldb:hsql://localhost/workdb", "sa", "");
		
		
		try (Statement st = jdbcConnection.createStatement()) {
            st.executeUpdate("DROP TABLE ADDRESS if exists");
            st.executeUpdate("DROP TABLE PERSON if exists");
            st.executeUpdate("CREATE TABLE if not exists Address(id bigint GENERATED BY DEFAULT AS IDENTITY, city varchar(40), postalCode char(6), street varchar(40), houseNumber varchar(20), residentId bigint)");
            st.executeUpdate("CREATE TABLE if not exists Person(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yob integer)");
        }
        jdbcConnection.commit();
		
		connection = new DatabaseConnection(jdbcConnection);
		
		//write DTD file
        //FlatDtdDataSet.write(connection.createDataSet(), new FileOutputStream("src/test/resources/test.dtd"));
		
		databaseTester = new JdbcDatabaseTester(
				"org.hsqldb.jdbcDriver", "jdbc:hsqldb:hsql://localhost/workdb", "sa", "");
		IDataSet dataSet = new FlatXmlDataSetBuilder().build(
				new FileInputStream(new File("src/test/resources/fullData.xml")));

		DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);
		databaseTester.setDataSet(dataSet);
		databaseTester.onSetup();
		databaseTester.setTearDownOperation(DatabaseOperation.DELETE_ALL);

	}

	@Test
	public void test1AddPeson() throws Exception{

		Person aPerson = new Person(4L, "Ziutek", 2010);
		given().contentType(MediaType.APPLICATION_JSON).body(aPerson)
				.when().post("persons/add").then().assertThat().statusCode(201);
		
		IDataSet dbDataSet = connection.createDataSet();
		ITable actualTable = dbDataSet.getTable("PERSON");
		ITable filteredTable = DefaultColumnFilter.excludedColumnsTable
				(actualTable, new String[]{"ID"});
		
		IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
				new File("src/test/resources/personData.xml"));
		ITable expectedTable = expectedDataSet.getTable("PERSON");
		
		Assertion.assertEquals(expectedTable, filteredTable);
		
	}
	
	
	@Test
    public void test2AddAddress() throws Exception {

        Address anAddress = new Address(3L, "Gdynia", "81-200", "Starowiejska", "22", 1L);
        given().contentType(MediaType.APPLICATION_JSON).body(anAddress)
                .when().post("/addresses/add").then().assertThat().statusCode(201);

        IDataSet dbDataSet = connection.createDataSet();

        ITable actualTable = dbDataSet.getTable("ADDRESS");
        ITable filteredTable = DefaultColumnFilter.excludedColumnsTable
                (actualTable, new String[]{"ID"});

        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
                new File("src/test/resources/addressData.xml"));
        ITable expectedTable = expectedDataSet.getTable("ADDRESS");

        Assertion.assertEquals(expectedTable, filteredTable);
    }
	
	
	@Test
	public void test3DeleteAddressById() throws Exception {

      delete("/addresses/1").then().assertThat().statusCode(200);
      
      IDataSet dbDataSet = connection.createDataSet();
      
      ITable actualTable = dbDataSet.getTable("ADDRESS");
      ITable filteredTable = DefaultColumnFilter.excludedColumnsTable
              (actualTable, new String[]{"ID"});

      IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
              new File("src/test/resources/addressDeleteByIdData.xml"));
      ITable expectedTable = expectedDataSet.getTable("ADDRESS");

      Assertion.assertEquals(expectedTable, filteredTable);
      
	}
	
	
	@Test
	public void test4DeleteAllAddresses() throws Exception {

      delete("/addresses/all").then().assertThat().statusCode(200);

      IDataSet dbDataSet = connection.createDataSet();

      ITable actualTable = dbDataSet.getTable("ADDRESS");
      ITable filteredTable = DefaultColumnFilter.excludedColumnsTable
              (actualTable, new String[]{"ID"});

      IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
              new File("src/test/resources/addressDeleteAllData.xml"));
      ITable expectedTable = expectedDataSet.getTable("ADDRESS");

      Assertion.assertEquals(expectedTable, filteredTable);
	}

	
	@AfterClass
	public static void tearDown() throws Exception{
		databaseTester.onTearDown();
	}

}
